// Code generated by go-ole-msoffice/generetor (json\outlook.json)
package outlook

import (
	ole "github.com/go-ole/go-ole"
	"github.com/go-ole/go-ole/oleutil"
	"time"
	"unsafe"
)

const (
	OlAccount                          = 105
	OlAccountRuleCondition             = 135
	OlAccounts                         = 106
	OlAction                           = 32
	OlActions                          = 33
	OlAddressEntries                   = 21
	OlAddressEntry                     = 8
	OlAddressList                      = 7
	OlAddressLists                     = 20
	OlAddressRuleCondition             = 170
	OlApplication                      = 0
	OlAppointment                      = 26
	OlAssignToCategoryRuleAction       = 122
	OlAttachment                       = 5
	OlAttachmentSelection              = 169
	OlAttachments                      = 18
	OlAutoFormatRule                   = 147
	OlAutoFormatRules                  = 148
	OlCalendarModule                   = 159
	OlCalendarSharing                  = 151
	OlCategories                       = 153
	OlCategory                         = 152
	OlCategoryRuleCondition            = 130
	OlClassBusinessCardView            = 168
	OlClassCalendarView                = 139
	OlClassCardView                    = 138
	OlClassIconView                    = 137
	OlClassNavigationPane              = 155
	OlClassPeopleView                  = 183
	OlClassTableView                   = 136
	OlClassTimeLineView                = 140
	OlClassTimeZone                    = 174
	OlClassTimeZones                   = 175
	OlColumn                           = 154
	OlColumnFormat                     = 149
	OlColumns                          = 150
	OlConflict                         = 102
	OlConflicts                        = 103
	OlContact                          = 40
	OlContactsModule                   = 160
	OlConversation                     = 178
	OlConversationHeader               = 182
	OlDistributionList                 = 69
	OlDocument                         = 41
	OlException                        = 30
	OlExceptions                       = 29
	OlExchangeDistributionList         = 111
	OlExchangeUser                     = 110
	OlExplorer                         = 34
	OlExplorers                        = 60
	OlFolder                           = 2
	OlFolderCalendar                   = 9
	OlFolderConflicts                  = 19
	OlFolderContacts                   = 10
	OlFolderDeletedItems               = 3
	OlFolderDrafts                     = 16
	OlFolderInbox                      = 6
	OlFolderJournal                    = 11
	OlFolderJunk                       = 23
	OlFolderLocalFailures              = 21
	OlFolderManagedEmail               = 29
	OlFolderNotes                      = 12
	OlFolderOutbox                     = 4
	OlFolderRssFeeds                   = 25
	OlFolderSentMail                   = 5
	OlFolderServerFailures             = 22
	OlFolderSuggestedContacts          = 30
	OlFolderSyncIssues                 = 20
	OlFolderTasks                      = 13
	OlFolderToDo                       = 28
	OlFolderUserProperties             = 172
	OlFolderUserProperty               = 171
	OlFolders                          = 15
	OlFormDescription                  = 37
	OlFormNameRuleCondition            = 131
	OlFormRegion                       = 129
	OlFromRssFeedRuleCondition         = 173
	OlFromRuleCondition                = 132
	OlImportanceRuleCondition          = 128
	OlInspector                        = 35
	OlInspectors                       = 61
	OlItemProperties                   = 98
	OlItemProperty                     = 99
	OlItems                            = 16
	OlJournal                          = 42
	OlJournalModule                    = 162
	OlMail                             = 43
	OlMailModule                       = 158
	OlMarkAsTaskRuleAction             = 124
	OlMeeting                          = 1
	OlMeetingCanceled                  = 5
	OlMeetingCancellation              = 54
	OlMeetingForwardNotification       = 181
	OlMeetingReceived                  = 3
	OlMeetingReceivedAndCanceled       = 7
	OlMeetingRequest                   = 53
	OlMeetingResponseNegative          = 55
	OlMeetingResponsePositive          = 56
	OlMeetingResponseTentative         = 57
	OlMoveOrCopyRuleAction             = 118
	OlNamespace                        = 1
	OlNavigationFolder                 = 167
	OlNavigationFolders                = 166
	OlNavigationGroup                  = 165
	OlNavigationGroups                 = 164
	OlNavigationModule                 = 157
	OlNavigationModules                = 156
	OlNewItemAlertRuleAction           = 125
	OlNonMeeting                       = 0
	OlNote                             = 44
	OlNotesModule                      = 163
	OlOrderField                       = 144
	OlOrderFields                      = 145
	OlOutlookBarGroup                  = 66
	OlOutlookBarGroups                 = 65
	OlOutlookBarPane                   = 63
	OlOutlookBarShortcut               = 68
	OlOutlookBarShortcuts              = 67
	OlOutlookBarStorage                = 64
	OlOutspace                         = 180
	OlPages                            = 36
	OlPanes                            = 62
	OlPlaySoundRuleAction              = 123
	OlPost                             = 45
	OlPropertyAccessor                 = 112
	OlPropertyPageSite                 = 70
	OlPropertyPages                    = 71
	OlPublicFoldersAllPublicFolders    = 18
	OlRecipient                        = 4
	OlRecipients                       = 17
	OlRecurrencePattern                = 28
	OlReminder                         = 101
	OlReminders                        = 100
	OlRemote                           = 47
	OlReport                           = 46
	OlResults                          = 78
	OlRow                              = 121
	OlRule                             = 115
	OlRuleAction                       = 117
	OlRuleActions                      = 116
	OlRuleCondition                    = 127
	OlRuleConditions                   = 126
	OlRules                            = 114
	OlSearch                           = 77
	OlSelectNamesDialog                = 109
	OlSelection                        = 74
	OlSendRuleAction                   = 119
	OlSenderInAddressListRuleCondition = 133
	OlSharing                          = 104
	OlSimpleItems                      = 179
	OlSolutionsModule                  = 177
	OlStorageItem                      = 113
	OlStore                            = 107
	OlStores                           = 108
	OlSyncObject                       = 72
	OlSyncObjects                      = 73
	OlTable                            = 120
	OlTask                             = 48
	OlTaskRequest                      = 49
	OlTaskRequestAccept                = 51
	OlTaskRequestDecline               = 52
	OlTaskRequestUpdate                = 50
	OlTasksModule                      = 161
	OlTextRuleCondition                = 134
	OlUserDefinedProperties            = 172
	OlUserDefinedProperty              = 171
	OlUserProperties                   = 38
	OlUserProperty                     = 39
	OlView                             = 80
	OlViewField                        = 142
	OlViewFields                       = 141
	OlViewFont                         = 146
	OlViews                            = 79
)

type IDispatcher interface {
	IDispatch() *ole.IDispatch
}

type Merger interface {
	Merge(*ole.VARIANT, error) Outlook
}

type Cast interface {
	Extends() Outlook
	GetClass() int
}

func ToString(v *ole.VARIANT, err error) (ret string) {
	if v.Value() != nil && err == nil {
		ret = v.ToString()
	}
	return
}
func ToBool(v *ole.VARIANT, err error) (ret bool) {
	if err == nil {
		if i := v.Value(); i != nil {
			if b, ok := i.(bool); ok {
				ret = b
			}
		}
	}
	return
}
func ToTime(v *ole.VARIANT, err error) (t time.Time) {
	if err == nil {
		f := *(*float64)(unsafe.Pointer(&v.Val))
		t = time.Date(1900, time.January, 1, 0, 0, 0, 0, time.Local)
		t = t.Add(time.Hour * 24 * time.Duration(int64(f)-2))
		t = t.Add(time.Millisecond * time.Duration((f-float64(int64(f)))/(1.0/86400000.0)))
	}
	return
}

type Error string

func (e Error) Error() string {
	return string(e)
}

type ErrorArray []error

func (e *ErrorArray) Error() (ret string) {
	for _, it := range *e {
		if it != nil {
			ret += it.Error()
		}
	}
	return ret
}

func MultiError(e error, es ...error) error {
	var ee ErrorArray
	if it, ok := e.(*ErrorArray); ok {
		ee = *it
	} else {
		ee = ErrorArray([]error{e})
	}
	if len(es) > 0 {
		ees := make([]error, 0, len(es)+1)
		for _, it := range es {
			if _, ok := it.(*ErrorArray); ok == false {
				ees = append(ees, it)
			}
		}
		ee = ErrorArray(append([]error(ee), ees...))
	}
	return &ee
}

type Outlook struct {
	Obj      *ole.IDispatch
	Err      error
	children []Outlook
}

func (a *Outlook) Merge(obj *ole.VARIANT, err error) Outlook {
	b := Outlook{
		Obj: obj.ToIDispatch(),
		Err: err,
	}
	a.children = append(a.children, b)
	if a.Err == nil {
		if err != nil {
			a.Err = err
		}
	} else {
		if err != nil {
			a.Err = MultiError(a.Err, err)
		}
	}
	return b
}
func (a *Outlook) Extends() Outlook {
	b := Outlook{
		Obj: a.Obj,
		Err: a.Err,
	}
	a.children = append(a.children, b)
	return b
}
func (a *Outlook) IDispatch() *ole.IDispatch {
	return a.Obj
}
func (a *Outlook) Error() (ret string) {
	if a.Err != nil {
		ret = a.Err.Error()
	}
	return
}
func (a *Outlook) Release() {
	if a.children != nil {
		for i, _ := range a.children {
			a.children[i].Release()
		}
		a.children = nil
	}
	if a.Obj != nil {
		a.Obj.Release()
		a.Obj = nil
	}
}

type Application struct {
	Outlook
}

func ApplicationCast(a Cast) (*Application, error) {
	if a.GetClass() != OlApplication {
		return nil, Error("Cast error : Application")
	}
	return &Application{
		Outlook: a.Extends(),
	}, nil
}

type AppointmentItem struct {
	Outlook
}

func AppointmentItemCast(a Cast) (*AppointmentItem, error) {
	if a.GetClass() != OlAppointment {
		return nil, Error("Cast error : AppointmentItem")
	}
	return &AppointmentItem{
		Outlook: a.Extends(),
	}, nil
}

type Folder struct {
	Outlook
}

func FolderCast(a Cast) (*Folder, error) {
	if a.GetClass() != OlFolder {
		return nil, Error("Cast error : Folder")
	}
	return &Folder{
		Outlook: a.Extends(),
	}, nil
}

type Folders struct {
	Outlook
}

func FoldersCast(a Cast) (*Folders, error) {
	if a.GetClass() != OlFolders {
		return nil, Error("Cast error : Folders")
	}
	return &Folders{
		Outlook: a.Extends(),
	}, nil
}

type Item struct {
	Outlook
}
type Items struct {
	Outlook
}

func ItemsCast(a Cast) (*Items, error) {
	if a.GetClass() != OlItems {
		return nil, Error("Cast error : Items")
	}
	return &Items{
		Outlook: a.Extends(),
	}, nil
}

type Namespace struct {
	Outlook
}

func NamespaceCast(a Cast) (*Namespace, error) {
	if a.GetClass() != OlNamespace {
		return nil, Error("Cast error : Namespace")
	}
	return &Namespace{
		Outlook: a.Extends(),
	}, nil
}
func ThisApplication() *Application {
	unknown, err := oleutil.CreateObject("Outlook.Application")
	if err != nil {
		return nil
	}
	obj, err := unknown.QueryInterface(ole.IID_IDispatch)
	return &Application{
		Outlook: Outlook{Obj: obj, Err: err},
	}
}
func (a *Outlook) GetSession() *Namespace {
	return &Namespace{
		Outlook: a.Merge(a.Obj.GetProperty("Session")),
	}
}
func (a *Outlook) GetClass() int {
	v, err := a.Obj.GetProperty("Class")
	a.Merge(v, err)
	return (int)(v.Val)
}
func (a *Outlook) GetApplication() *Application {
	return &Application{
		Outlook: a.Merge(a.Obj.GetProperty("Application")),
	}
}
func (a *Application) GetName() string {
	v, err := a.Obj.GetProperty("Name")
	a.Merge(v, err)
	return ToString(v, err)
}
func (a *Application) GetNamespace(a0 string) *Namespace {
	return &Namespace{
		Outlook: a.Merge(a.Obj.CallMethod("GetNamespace", a0)),
	}
}
func (a *Namespace) GetFolders() *Folders {
	return &Folders{
		Outlook: a.Merge(a.Obj.GetProperty("Folders")),
	}
}
func (a *Namespace) GetDefaultFolder(a0 int) *Folder {
	return &Folder{
		Outlook: a.Merge(a.Obj.CallMethod("GetDefaultFolder", a0)),
	}
}
func (a *Folders) GetCount() int {
	v, err := a.Obj.GetProperty("Count")
	a.Merge(v, err)
	return (int)(v.Val)
}
func (a *Folders) Remove(a0 int) *Folder {
	return &Folder{
		Outlook: a.Merge(a.Obj.CallMethod("Remove", a0)),
	}
}
func (a *Folders) GetFirst() *Folder {
	return &Folder{
		Outlook: a.Merge(a.Obj.CallMethod("GetFirst")),
	}
}
func (a *Folders) GetLast() *Folder {
	return &Folder{
		Outlook: a.Merge(a.Obj.CallMethod("GetLast")),
	}
}
func (a *Folders) GetNext() *Folder {
	return &Folder{
		Outlook: a.Merge(a.Obj.CallMethod("GetNext")),
	}
}
func (a *Folders) GetPrevious() *Folder {
	return &Folder{
		Outlook: a.Merge(a.Obj.CallMethod("GetPrevious")),
	}
}
func (a *Folders) Item(a0 int) *Folder {
	return &Folder{
		Outlook: a.Merge(a.Obj.CallMethod("Item", a0)),
	}
}
func (a *Folder) GetFolders() *Folders {
	return &Folders{
		Outlook: a.Merge(a.Obj.GetProperty("Folders")),
	}
}
func (a *Folder) GetItems() *Items {
	return &Items{
		Outlook: a.Merge(a.Obj.GetProperty("Items")),
	}
}
func (a *Items) GetCount() int {
	v, err := a.Obj.GetProperty("Count")
	a.Merge(v, err)
	return (int)(v.Val)
}
func (a *Items) FindNext() *Item {
	return &Item{
		Outlook: a.Merge(a.Obj.CallMethod("FindNext")),
	}
}
func (a *Items) GetFirst() *Item {
	return &Item{
		Outlook: a.Merge(a.Obj.CallMethod("GetFirst")),
	}
}
func (a *Items) GetLast() *Item {
	return &Item{
		Outlook: a.Merge(a.Obj.CallMethod("GetLast")),
	}
}
func (a *Items) GetNext() *Item {
	return &Item{
		Outlook: a.Merge(a.Obj.CallMethod("GetNext")),
	}
}
func (a *Items) GetPrevious() *Item {
	return &Item{
		Outlook: a.Merge(a.Obj.CallMethod("GetPrevious")),
	}
}
func (a *Items) Sort(a0 string, a1 bool) {
	v, err := a.Obj.CallMethod("Sort", a0, a1)
	a.Merge(v, err)
}
func (a *Items) Find(a0 string) *Item {
	return &Item{
		Outlook: a.Merge(a.Obj.CallMethod("Find", a0)),
	}
}
func (a *Items) Restrict(a0 string) *Item {
	return &Item{
		Outlook: a.Merge(a.Obj.CallMethod("Restrict", a0)),
	}
}
func (a *Items) Item(a0 int) *Item {
	return &Item{
		Outlook: a.Merge(a.Obj.CallMethod("Item", a0)),
	}
}
func (a *Items) Remove(a0 int) *Item {
	return &Item{
		Outlook: a.Merge(a.Obj.CallMethod("Remove", a0)),
	}
}
func (a *Items) SetColumns(a0 string) {
	v, err := a.Obj.CallMethod("SetColumns", a0)
	a.Merge(v, err)
}
func (a *Items) ResetColumns() {
	v, err := a.Obj.CallMethod("ResetColumns")
	a.Merge(v, err)
}
func (a *AppointmentItem) GetBody() string {
	v, err := a.Obj.GetProperty("Body")
	a.Merge(v, err)
	return ToString(v, err)
}
func (a *AppointmentItem) GetCreationTime() time.Time {
	v, err := a.Obj.GetProperty("CreationTime")
	a.Merge(v, err)
	return ToTime(v, err)
}
func (a *AppointmentItem) GetMeetingStatus() int {
	v, err := a.Obj.GetProperty("MeetingStatus")
	a.Merge(v, err)
	return (int)(v.Val)
}
func (a *AppointmentItem) SetMeetingStatus(a0 int) {
	v, err := a.Obj.PutProperty("MeetingStatus", a0)
	a.Merge(v, err)
}
func (a *AppointmentItem) GetResponseStatus() int {
	v, err := a.Obj.GetProperty("ResponseStatus")
	a.Merge(v, err)
	return (int)(v.Val)
}
func (a *AppointmentItem) GetSensitivity() int {
	v, err := a.Obj.GetProperty("Sensitivity")
	a.Merge(v, err)
	return (int)(v.Val)
}
func (a *AppointmentItem) GetEnd() time.Time {
	v, err := a.Obj.GetProperty("End")
	a.Merge(v, err)
	return ToTime(v, err)
}
func (a *AppointmentItem) GetLastModificationTime() time.Time {
	v, err := a.Obj.GetProperty("LastModificationTime")
	a.Merge(v, err)
	return ToTime(v, err)
}
func (a *AppointmentItem) GetOptionalAttendees() string {
	v, err := a.Obj.GetProperty("OptionalAttendees")
	a.Merge(v, err)
	return ToString(v, err)
}
func (a *AppointmentItem) GetReminderMinutesBeforeStart() int {
	v, err := a.Obj.GetProperty("ReminderMinutesBeforeStart")
	a.Merge(v, err)
	return (int)(v.Val)
}
func (a *AppointmentItem) SetReminderMinutesBeforeStart(a0 int) {
	v, err := a.Obj.PutProperty("ReminderMinutesBeforeStart", a0)
	a.Merge(v, err)
}
func (a *AppointmentItem) GetReplyTime() time.Time {
	v, err := a.Obj.GetProperty("ReplyTime")
	a.Merge(v, err)
	return ToTime(v, err)
}
func (a *AppointmentItem) GetRequiredAttendees() string {
	v, err := a.Obj.GetProperty("RequiredAttendees")
	a.Merge(v, err)
	return ToString(v, err)
}
func (a *AppointmentItem) GetStart() time.Time {
	v, err := a.Obj.GetProperty("Start")
	a.Merge(v, err)
	return ToTime(v, err)
}
func (a *AppointmentItem) GetLocation() string {
	v, err := a.Obj.GetProperty("Location")
	a.Merge(v, err)
	return ToString(v, err)
}
func (a *AppointmentItem) GetOrganizer() string {
	v, err := a.Obj.GetProperty("Organizer")
	a.Merge(v, err)
	return ToString(v, err)
}
func (a *AppointmentItem) GetRecurrenceState() int {
	v, err := a.Obj.GetProperty("RecurrenceState")
	a.Merge(v, err)
	return (int)(v.Val)
}
func (a *AppointmentItem) GetReminderSet() bool {
	v, err := a.Obj.GetProperty("ReminderSet")
	a.Merge(v, err)
	return ToBool(v, err)
}
func (a *AppointmentItem) SetReminderSet(a0 bool) {
	v, err := a.Obj.PutProperty("ReminderSet", a0)
	a.Merge(v, err)
}
func (a *AppointmentItem) GetAllDayEvent() bool {
	v, err := a.Obj.GetProperty("AllDayEvent")
	a.Merge(v, err)
	return ToBool(v, err)
}
func (a *AppointmentItem) GetSubject() string {
	v, err := a.Obj.GetProperty("Subject")
	a.Merge(v, err)
	return ToString(v, err)
}
func (a *AppointmentItem) GetDuration() int {
	v, err := a.Obj.GetProperty("Duration")
	a.Merge(v, err)
	return (int)(v.Val)
}
func (a *AppointmentItem) GetEntryID() string {
	v, err := a.Obj.GetProperty("EntryID")
	a.Merge(v, err)
	return ToString(v, err)
}
func (a *AppointmentItem) GetMeetingWorkspaceURL() string {
	v, err := a.Obj.GetProperty("MeetingWorkspaceURL")
	a.Merge(v, err)
	return ToString(v, err)
}
